{"mappings":"YAAO,IAAMA,EAAO,CAClBC,SAAUC,SAASC,eAAe,aAClCC,SAAUF,SAASC,eAAe,cCF9BE,EAAQ,QAEP,SAASC,EAASC,GACrB,IAAMC,EAAQC,IACdD,EAAME,KAAKH,GACXI,aAAaC,QAAQP,EAAOQ,KAAKC,UAAUN,G,CAIxC,SAASC,IAEZ,OADcI,KAAKE,MAAMJ,aAAaK,QAAQX,KAAW,E,CCTtD,ICGCY,EDeGC,EAAS,W,IAACC,EAAIC,UAAAC,OAAA,YAAAD,UAAA,GAAAA,UAAA,GAAG,G,OAC1BE,OAAOC,gBAAgB,IAAIC,WAAWL,IAAOM,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,G,GAGP,G,EE9BE,SAASG,EAAWC,GACvB,IAAMxB,EAAQ,CAACmB,GAAGR,KAElB,OADA,IAAIc,SAASD,EAAEE,eAAeC,SAAQ,SAACC,EAAOC,G,OAAU7B,EAAM6B,GAAQD,C,IAC/D5B,C,CCHJ,SAAS8B,EAAW9B,GACvB,IAAMU,EAAS,iFAEPqB,OADuC/B,EAAMmB,GAAG,kCAEjDY,OADC/B,EAAMgC,SAAS,oBACDD,OAAf/B,EAAMiC,SAAS,iBAExBxC,EAAKI,SAASqC,mBAAmB,YAAaxB,E,CCahDjB,EAAKC,SAASyC,iBAAiB,UCfxB,SAAkBX,GACvBA,EAAEY,iBACA,IAAMpC,EAAQuB,EAAWC,GACzBzB,EAASC,GACX8B,EAAW9B,GACXP,EAAKC,SAAS2C,O,IJPR3B,EAASR,IACZoC,KACC,SAAAd,G,MAAK,kFAECO,OADwCP,EAAEL,GAAG,kCAE9CY,OADCP,EAAEQ,SAAS,oBACDD,OAAXP,EAAES,SAAS,gB,IAGjBM,KAAK,KACR9C,EAAKI,SAASqC,mBAAmB,YAAaxB,GGWhDjB,EAAKI,SAASsC,iBAAiB,SAE/B,SAAsBX,GACpB,GAA0B,WAAtBA,EAAEgB,OAAOC,SACAjB,EAAEgB,OAAOE,QAAQvB,E","sources":["src/js/refs.js","src/js/localeStorageApi.js","node_modules/nanoid/index.browser.js","src/js/renderCards.js","src/js/createTask.js","src/js/renderTask.js","src/index.js","src/js/onSubmit.js"],"sourcesContent":["export const refs = {\n  taskForm: document.getElementById('task-form'),\n  taskList: document.getElementById('task-list'),\n};\n\n","const TASKS = 'notes';\n\nexport function addTasks(notes) {\n    const tasks = getTasks();\n    tasks.push(notes);\n    localStorage.setItem(TASKS, JSON.stringify(tasks));\n    \n}\n\nexport function getTasks() {\n    const tasks = JSON.parse(localStorage.getItem(TASKS)) || [];\n    return tasks;\n};\n\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { getTasks } from './localeStorageApi.js';\nimport { refs } from './refs.js';\n\nexport function renderCards() {\n  const markup = getTasks()\n    .map(\n      e => `<li class=\"task-list-item\">\n      <button class=\"task-list-item-btn\" data-id=\"${e.id}\">Удалить</button>\n      <h3>${e.taskName}</h3>\n      <p>${e.taskText}</p>\n  </li>`\n    )\n    .join(' ');\n  refs.taskList.insertAdjacentHTML('beforeend', markup);\n}\n","import { nanoid } from \"nanoid\";\n\nexport function createTask(e) {\n    const notes = {id:nanoid()};\n    new FormData(e.currentTarget).forEach((value, name) => (notes[name] = value));\n    return notes;\n}","import { refs } from \"./refs\";\n\nexport function renderTask(notes) {\n    const markup = `<li class=\"task-list-item\">\n     <button class=\"task-list-item-btn\" data-id=\"${notes.id}\">Удалить</button>\n      <h3>${notes.taskName}</h3>\n      <p>${notes.taskText}</p>\n  </li>`\n  refs.taskList.insertAdjacentHTML('beforeend', markup);\n};","import { refs } from './js/refs.js';\nimport { onSubmit } from './js/onSubmit.js';\nimport { renderCards } from './js/renderCards.js';\n\n/**\n * Створи список справ.\n * На сторінці є два інпути які має вводиться назва і текст задачі.\n * Після натискання на кнопку \"Додати\" завдання додається до списку #task-list.\n *\n * Розмітка картки задачі\n * <li class=\"task-list-item\">\n *     <button class=\"task-list-item-btn\">Удалить</button>\n *     <h3>Заголовок</h3>\n *     <p>Текст</p>\n * </li>\n *\n * У кожної картки має бути кнопка \"Видалити\", щоб можна було\n * прибрати завдання зі списку.\n * Список із завданнями має бути доступним після перезавантаження сторінки.\n */\n\nrefs.taskForm.addEventListener('submit', onSubmit);\nrenderCards()\n\nrefs.taskList.addEventListener(\"click\", onDeleteCard)\n\nfunction onDeleteCard(e) {\n  if (e.target.nodeName === \"BUTTON\") {\n    const id = e.target.dataset.id\n }\n}","import { addTasks } from './localeStorageApi.js';\nimport { createTask } from './createTask.js';\nimport { renderTask } from './renderTask.js';\nimport { refs } from './refs.js';\n\n\nexport function onSubmit(e) {\n  e.preventDefault();\n    const notes = createTask(e);\n    addTasks(notes);\n  renderTask(notes);\n  refs.taskForm.reset();\n};"],"names":["$37e33676934ad046$export$21666b427502ea6d","taskForm","document","getElementById","taskList","$341d8408137c6144$var$TASKS","$341d8408137c6144$export$1da2656ea5375715","notes","tasks","$341d8408137c6144$export$20b82b4a32771893","push","localStorage","setItem","JSON","stringify","parse","getItem","markup","$8069ef7e6126e429$export$ac4959f4f1338dfc","size","arguments","length","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","$0c2b62bf04dc0cab$export$f7292ab7796be73c","e","FormData","currentTarget","forEach","value","name","$71652908811b298d$export$d70d03046d8670f9","concat","taskName","taskText","insertAdjacentHTML","addEventListener","preventDefault","reset","map","join","target","nodeName","dataset"],"version":3,"file":"index.1c76bda3.js.map"}